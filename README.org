#+title: Untexify - a bad clone of [[https://detexify.kirelabs.org/classify.html][Detexify]]
# TODO: Make this past-tense
* What this is
This is a placeholder repo for a future Tensorflow project I intend to complete by [2023-03-27 Mon].
* Road-map
** Backend
*** TODO Create the dataset
**** DONE Pull a large list of symbols from [[https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols][OEIS]]

I simply copied a table's symbols and formatted them into a file such that each piece of LaTeX was on its own line.
**** DONE Convert them into .png files

I used [[https://github.com/mtyrolski/latex2image.git][latex2image]] to convert the list of commands into small, square images of each symbol. The program is a bit finnicky, so for future reference, I placed the file containing my equations called ~equations.txt~ the root of the git repository, then ran from the root:
#+begin_src bash
    cd src/
    . set.sh $absolute_path_to_equations_txt
    cd ..
    cd equations.txt_aux
    python generate_latex.py
#+end_src
I numbered the resulting files using Dired.
**** DONE Sort them into classes based on their latex code

I created my [[file:./images/][images/]] folder, and used this bit of bash magic to sort them into folders sharing their same names:
#+begin_src bash
    for i in $(seq 0 $IMAGE_COUNT); do mkdir $i; mv $i.png $i/; done
#+end_src
Which resulted in:
#+begin_src bash :results
    ls ./images
#+end_src

#+results:
|  0 |
|  1 |
| 10 |
| 11 |
| 12 |
| 13 |
| 14 |
| 15 |
| 16 |
| 17 |
| 18 |
| 19 |
|  2 |
| 20 |
| 21 |
| 22 |
| 23 |
| 24 |
| 25 |
| 26 |
| 27 |
| 28 |
| 29 |
|  3 |
| 30 |
| 31 |
| 32 |
| 33 |
| 34 |
| 35 |
| 36 |
| 37 |
| 38 |
| 39 |
|  4 |
| 40 |
| 41 |
| 42 |
| 43 |
| 44 |
| 45 |
| 46 |
| 47 |
| 48 |
| 49 |
|  5 |
| 50 |
| 51 |
| 52 |
|  6 |
|  7 |
|  8 |
|  9 |

**** TODO Simulate handwriting

To do this I need a series of "transforms" which will piecewise randomly affect an aspect of a given image. This prevents overfitting, and in the first phase makes the model functional at all. Here are the aspects of the image I chose to transform:

|----------------------------------+------------------------|
| Writing aspect                   | Transform name         |
|----------------------------------+------------------------|
| "wiggliness" or poor handwriting | ~A.ElasticTransform()~ |
| Sharpening                       | ~A.Sharpen()~          |
| Uniform color                    | ~A.Equalize()~         |
| Orientation/rotation             |                        |
| Scale                            |                        |
|----------------------------------+------------------------|
***** TODO Translation and scale
Although a textbook cited at the keras docs mentions that convolution layers /should/ be translation invariant, a cursory test of my model indicates they are definitely not. So, I need to alter the transformation stack accordingly. The model is also not resistant to the scale of the input, so I need to fix that as well.
***** TODO Stroke
The model is not resistant to different strokes. Depending on the way I implement the frontend, there may be no reason to train the model to recognize this.
***** TODO Choose a list of symbols
Initially, I chose a sample of 50 symbols picked mostly arbitrarily. The initial sample includes multiple sets of symbols which would be similarly drawn ($\prec$ and $<$, for example), and also made liberal use of "$\not$"'s (\not's). Because no large public facing database of small latex symbols in the model's format exists[fn:1], and the transform stack is prohibitively computationally expensive, I had to decide what my relatively small data set will contain. I decided on a set of symbols composed mostly of some of the most popular mathematical symbols.

This might be a bit paradoxical, because those symbols which are most popular surely are the most remembered. This may be true, but it is also true that there are probably more beginning researchers and students in need of a reference for basic symbols than there are people who need to lookup the more esoteric symbols. Since [[https://detexify.kirelabs.org/classify.html][detexify]] exists and has a more comprehensive database, I choose for my tool to be more of a quick reference.

*** TODO Train the model
** Frontend
*** Drawing app
*** Calling the model
*** Formatting
*** Hosting the site
fly.io perhaps...

* Footnotes

[fn:1] Verify this, specifically from [[https://detexify.kirelabs.org/classify.html][detexify]]
